Folder Structure
--------------------------------------------------
github_repo_0xc1lb_u/
    .gitignore
    main.py
    readme.md
    .git/
        config
        description
        HEAD
        index
        packed-refs
        hooks/
            applypatch-msg.sample
            commit-msg.sample
            fsmonitor-watchman.sample
            post-update.sample
            pre-applypatch.sample
            pre-commit.sample
            pre-merge-commit.sample
            pre-push.sample
            pre-rebase.sample
            pre-receive.sample
            prepare-commit-msg.sample
            push-to-checkout.sample
            update.sample
        info/
            exclude
        logs/
            HEAD
            refs/
                heads/
                    main
                remotes/
                    origin/
                        HEAD
        objects/
            info/
            pack/
                pack-98876418e810f5f83543dfab9be8884419767a33.idx
                pack-98876418e810f5f83543dfab9be8884419767a33.pack
        refs/
            heads/
                main
            remotes/
                origin/
                    HEAD
            tags/
    gui/
        main_window.py
        result_window.py
        test_window.py
    logic/
        exceptions.py
        image_processor.py
        pdf_report.py
        results_manager.py
        test_controller.py
    resources/
        images/
            Ishihara_00.jpg
            Ishihara_03.jpg
            Ishihara_04.jpg
            Ishihara_Plate_3.jpg
            Ishihara_Plate_7.jpg
            Ishihara_Plate_8.jpg


File Contents
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.gitignore
File type: 
gui/__pycache__/
__pycache__
resources/output/

--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\main.py
File type: .py
import tkinter as tk
from gui.main_window import MainWindow

def main():
    root = tk.Tk()
    app = MainWindow(root)
    root.mainloop()

if __name__ == "__main__":
    main()


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\readme.md
File type: .md
# Ishihara test simple GUI interface
TODO

--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\config
File type: 
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[remote "origin"]
	url = https://github.com/Arencik/grafika.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\description
File type: 
Unnamed repository; edit this file 'description' to name the repository.


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\HEAD
File type: 
ref: refs/heads/main


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\packed-refs
File type: 
# pack-refs with: peeled fully-peeled sorted 
cc7642d7e847c2bb98293a8f1f4b921d2642e99a refs/remotes/origin/main


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\hooks\applypatch-msg.sample
File type: .sample
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\hooks\commit-msg.sample
File type: .sample
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\hooks\fsmonitor-watchman.sample
File type: .sample
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\hooks\post-update.sample
File type: .sample
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\hooks\pre-applypatch.sample
File type: .sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\hooks\pre-commit.sample
File type: .sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\hooks\pre-merge-commit.sample
File type: .sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\hooks\pre-push.sample
File type: .sample
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\hooks\pre-rebase.sample
File type: .sample
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\hooks\pre-receive.sample
File type: .sample
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\hooks\prepare-commit-msg.sample
File type: .sample
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\hooks\push-to-checkout.sample
File type: .sample
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\hooks\update.sample
File type: .sample
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\info\exclude
File type: 
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\logs\HEAD
File type: 
0000000000000000000000000000000000000000 cc7642d7e847c2bb98293a8f1f4b921d2642e99a Arencik <80043391+Arencik@users.noreply.github.com> 1735825293 +0100	clone: from https://github.com/Arencik/grafika.git


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\logs\refs\heads\main
File type: 
0000000000000000000000000000000000000000 cc7642d7e847c2bb98293a8f1f4b921d2642e99a Arencik <80043391+Arencik@users.noreply.github.com> 1735825293 +0100	clone: from https://github.com/Arencik/grafika.git


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\logs\refs\remotes\origin\HEAD
File type: 
0000000000000000000000000000000000000000 cc7642d7e847c2bb98293a8f1f4b921d2642e99a Arencik <80043391+Arencik@users.noreply.github.com> 1735825293 +0100	clone: from https://github.com/Arencik/grafika.git


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\refs\heads\main
File type: 
cc7642d7e847c2bb98293a8f1f4b921d2642e99a


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\.git\refs\remotes\origin\HEAD
File type: 
ref: refs/remotes/origin/main


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\gui\main_window.py
File type: .py
import tkinter as tk
from tkinter import messagebox
from gui.test_window import TestWindow
from logic.test_controller import TestController
from logic.results_manager import ResultsManager
import os

class MainWindow:
    def __init__(self, master):
        self.master = master
        self.master.title("Test percepcji barw")
        self.master.geometry("300x150")

        self.frame = tk.Frame(self.master)
        self.frame.pack(expand=True, fill="both")

        self.start_button = tk.Button(
            self.frame, text="Start testu", command=self.start_test)
        self.start_button.pack(pady=20)

        self.controller = TestController()
        self.results_manager = ResultsManager()

    def start_test(self):
        images_path = os.path.join("resources", "images")
        if not os.path.exists(images_path):
            messagebox.showerror("Błąd", "Brak katalogu z obrazami testowymi.")
            return

        test_images = os.listdir(images_path)
        test_images = [os.path.join(images_path, img) for img in test_images if os.path.exists(os.path.join(images_path, img))]

        if len(test_images) == 0:
            messagebox.showerror("Błąd", "Brak obrazów do testu.")
            return

        self.controller.setup_test(test_images, num_iterations=4)

        self.new_window = tk.Toplevel(self.master)
        self.test_window = TestWindow(self.new_window, self.controller, self.results_manager, self.on_test_end)

    def on_test_end(self):
        from gui.result_window import ResultWindow
        result_window = tk.Toplevel(self.master)
        ResultWindow(result_window, self.results_manager)


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\gui\result_window.py
File type: .py
import tkinter as tk
from tkinter import messagebox
import matplotlib
matplotlib.use("TkAgg")
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import os
import csv
import time
from datetime import datetime
from logic.pdf_report import generate_pdf_report
from PIL import Image

class ResultWindow:
    def __init__(self, master, results_manager):
        self.master = master
        self.results_manager = results_manager

        self.master.title("Wyniki testu")
        self.master.geometry("1200x800")

        # Główna ramka dzieląca na tekst i wykresy
        self.main_frame = tk.Frame(self.master)
        self.main_frame.pack(expand=True, fill="both")

        self.top_frame = tk.Frame(self.main_frame)
        self.top_frame.pack(side="top", fill="x", pady=10)

        self.bottom_frame = tk.Frame(self.main_frame)
        self.bottom_frame.pack(side="top", expand=True, fill="both", pady=10)

        # Wewnętrzne ramki dla lepszej organizacji
        self.text_frame = tk.Frame(self.top_frame)
        self.text_frame.pack(side="left", fill="both", expand=True, padx=10)

        self.charts_frame = tk.Frame(self.bottom_frame)
        self.charts_frame.pack(side="top", fill="both", expand=True)

        self.button_frame = tk.Frame(self.bottom_frame)
        self.button_frame.pack(side="bottom", fill="x", pady=10)

        # Dane bieżącego testu
        results = self.results_manager.get_results()

        # Tekstowe podsumowanie
        summary_text = "Wyniki testu (bieżącej sesji):\n\n"
        for i, res in enumerate(results, start=1):
            dt_str = datetime.fromtimestamp(res['timestamp']).strftime("%Y-%m-%d %H:%M:%S")
            summary_text += f"{i}. Obraz: {res['image_name']}, Czas: {res['reaction_time']:.2f}s, Intensywność: {res['intensity']}, Timestamp: {dt_str}\n"

        self.text_label = tk.Label(self.text_frame, text=summary_text, justify="left")
        self.text_label.pack(pady=10, anchor="w")

        # Zapis wyników do CSV (append)
        self.results_manager.export_csv()

        # Wczytanie wszystkich danych (historycznych)
        all_results = self.load_all_results()

        # WYKRES 1: Bar plot (bieżący test), oś Y: obrazy, oś X: średni czas reakcji
        fig1, ax1, chart_path_current = self.create_current_test_bar_plot(results)

        # WYKRES 2: Historyczny wykres reakcji w czasie dla każdego obrazu
        fig2, ax2, chart_path_history = self.create_historical_line_plot(all_results, results)

        # Osadzenie wykresów
        canvas1 = FigureCanvasTkAgg(fig1, master=self.charts_frame)
        canvas1.draw()
        canvas1.get_tk_widget().pack(side="left", padx=10, pady=10)

        canvas2 = FigureCanvasTkAgg(fig2, master=self.charts_frame)
        canvas2.draw()
        canvas2.get_tk_widget().pack(side="right", padx=10, pady=10)

        # Przycisk PDF pod ramką wykresów
        self.pdf_button = tk.Button(self.button_frame, text="Generuj PDF", command=lambda: self.generate_pdf(chart_path_current, chart_path_history))
        self.pdf_button.pack(side="left", padx=10, pady=10)

    def load_all_results(self):
        """
        Load all results from a CSV file.

        This method reads a CSV file located at "resources/output/results.csv" and 
        loads the data into a list of dictionaries. Each dictionary contains the 
        following keys:
            - "timestamp": A float representing the timestamp of the result.
            - "image_name": A string representing the name of the image.
            - "reaction_time": A float representing the reaction time.
            - "intensity": An integer representing the intensity.

        Returns:
            list: A list of dictionaries containing the results. If the CSV file 
            does not exist, an empty list is returned.
        """
        csv_path = "resources/output/results.csv"
        if not os.path.exists(csv_path):
            return []
        results = []
        with open(csv_path, "r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                results.append({
                    "timestamp": float(row["timestamp"]),
                    "image_name": row["image_name"],
                    "reaction_time": float(row["reaction_time"]),
                    "intensity": int(row["intensity"])
                })
        return results

    def create_current_test_bar_plot(self, results):
        """
        Creates a horizontal bar plot of average reaction times for each image in the current test.
        Args:
            results (list of dict): A list of dictionaries where each dictionary contains 'image_name' (str) 
                                    and 'reaction_time' (float) keys representing the image name and the 
                                    reaction time for that image.
        Returns:
            tuple: A tuple containing the following elements:
                - fig (matplotlib.figure.Figure): The created matplotlib figure.
                - ax (matplotlib.axes._axes.Axes): The created matplotlib axes.
                - chart_path_current (str): The file path where the plot image is saved.
        """
        # Obliczamy średni czas reakcji dla każdego obrazu w bieżącym teście
        from statistics import mean
        results_by_image = {}
        for r in results:
            img = r['image_name']
            if img not in results_by_image:
                results_by_image[img] = []
            results_by_image[img].append(r['reaction_time'])

        images = list(results_by_image.keys())
        avg_times = [mean(results_by_image[img]) for img in images]

        fig, ax = plt.subplots(figsize=(5,4))
        y_pos = range(len(images))
        ax.barh(y_pos, avg_times, align='center', color='skyblue')
        ax.set_yticks(y_pos)
        ax.set_yticklabels(images)
        ax.invert_yaxis()  # żeby najwyższy był na górze
        ax.set_xlabel('Czas reakcji (s)')
        ax.set_title('Czas reakcji dla obrazow (biezacy test)')

        output_dir = os.path.join("resources", "output")
        os.makedirs(output_dir, exist_ok=True)
        chart_path_current = os.path.join(output_dir, "chart_current_test.png")
        fig.savefig(chart_path_current)
        return fig, ax, chart_path_current

    def create_historical_line_plot(self, all_results, current_results):
        """
        Creates a historical line plot of reaction times over time for different images.
        Parameters:
        all_results (list of dict): A list of dictionaries containing historical results. 
                                    Each dictionary should have keys 'image_name', 'timestamp', and 'reaction_time'.
        current_results (list of dict): A list of dictionaries containing current results. 
                                        Each dictionary should have keys 'image_name', 'timestamp', and 'reaction_time'.
        Returns:
        tuple: A tuple containing the figure object, the axes object, and the path to the saved chart image.
        """
        # Tworzymy liniowy wykres czasu reakcji w funkcji czasu dla poszczególnych obrazów
        # x - czas (datetime), y - czas reakcji, seria - nazwa obrazu
        fig, ax = plt.subplots(figsize=(5,4))

        # Grupowanie historycznych wyników po obrazie
        results_by_image = {}
        for r in all_results:
            img = r['image_name']
            if img not in results_by_image:
                results_by_image[img] = []
            results_by_image[img].append(r)

        # Sortujemy każdą listę po timestamp
        for img in results_by_image:
            results_by_image[img].sort(key=lambda x: x['timestamp'])

        # Rysujemy wykres dla każdego obrazu
        for img, res_list in results_by_image.items():
            x = [datetime.fromtimestamp(r['timestamp']) for r in res_list]
            y = [r['reaction_time'] for r in res_list]
            ax.plot(x, y, marker='o', label=img)

        # Dodajemy formatowanie osi X jako datę i godzinę
        ax.xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d %H:%M:%S"))
        fig.autofmt_xdate()  # automatyczne pochylanie etykiet

        ax.set_title("Czas reakcji w funkcji czasu (wszystkie testy)")
        ax.set_xlabel("Data i godzina")
        ax.set_ylabel("Czas reakcji (s)")
        ax.legend()

        output_dir = os.path.join("resources", "output")
        chart_path_history = os.path.join(output_dir, "chart_history.png")
        fig.savefig(chart_path_history)
        return fig, ax, chart_path_history

    def generate_pdf(self, chart_path_current, chart_path_history):
        """
        Generates a PDF report containing images and charts.
        This method processes a list of results, resizes and modifies images based on the results,
        and then generates a PDF report that includes these images along with the provided charts.
        Args:
            chart_path_current (str): The file path to the current chart image.
            chart_path_history (str): The file path to the historical chart image.
        Returns:
            None
        Raises:
            FileNotFoundError: If any of the image paths do not exist.
            Exception: If there is an error during the PDF generation process.
        Side Effects:
            Saves resized and modified images to the output directory.
            Generates and saves a PDF report to the output directory.
            Displays a message box with the path to the generated PDF report.
        """
        output_dir = "resources/output"
        results = self.results_manager.get_results()

        from logic.image_processor import resize_image, modify_image_intensity
        images_for_pdf = []
        for res in results:
            image_name = res['image_name'].split("\\")[-1]
            img_path = os.path.join("resources/images", image_name)
            if not os.path.exists(img_path):
                continue
            # Oryginał (miniatura)
            orig_img = resize_image(img_path, 150, 150)
            orig_path = os.path.join(output_dir, f"orig_{res['timestamp']}_{image_name}")
            orig_img.save(orig_path)

            # Obraz z filtrem
            filtered_img = modify_image_intensity(orig_img.copy(), res['intensity'])
            filtered_path = os.path.join(output_dir, f"filtered_{res['timestamp']}_{image_name}")
            filtered_img.save(filtered_path)

            images_for_pdf.append({
                "timestamp": res['timestamp'],
                "image_name": image_name,
                "reaction_time": res['reaction_time'],
                "intensity": res['intensity'],
                "orig_path": orig_path,
                "filtered_path": filtered_path
            })
        pdf_path = os.path.join(output_dir, "report.pdf")
        generate_pdf_report(pdf_path, images_for_pdf, chart_path_current, chart_path_history)
        messagebox.showinfo("PDF", f"Wygenerowano raport PDF: {pdf_path}")


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\gui\test_window.py
File type: .py
import tkinter as tk
import time
from PIL import ImageTk
from logic.image_processor import modify_image_intensity, resize_image
from tkinter import messagebox

class TestWindow:
    def __init__(self, master, controller, results_manager, end_callback):
        self.master = master
        self.controller = controller
        self.results_manager = results_manager
        self.end_callback = end_callback

        self.master.title("Test percepcji barw")
        self.master.geometry("600x500")

        self.frame = tk.Frame(self.master)
        self.frame.pack(expand=True, fill="both")

        self.image_label = tk.Label(self.frame)
        self.image_label.pack(pady=20)

        self.stop_button = tk.Button(
            self.frame, text="Przerwij test", command=self.stop_test)
        self.stop_button.pack(side="bottom", pady=20)

        self.current_image_path = None
        self.start_time = None
        self.intensity = 0
        self.direction = 1  # 1 - zwiększamy, -1 - zmniejszamy
        self.timeout_id = None

        self.master.bind("<space>", self.on_space_press)

        self.load_next_image()
        self.update_image_intensity()

    def load_next_image(self):
        img_path = self.controller.get_next_image()
        if img_path is None:
            self.end_test()
            return
        self.current_image_path = img_path
        self.start_time = time.time()

        # Ustawienie timera timeout (60 sek)
        if self.timeout_id is not None:
            self.master.after_cancel(self.timeout_id)
        self.timeout_id = self.master.after(60000, self.on_timeout)

    def on_timeout(self):
        messagebox.showerror("Timeout", "Czas odpowiedzi przekroczył 60 sekund. Test zostaje przerwany.")
        self.end_test()

    def update_image_intensity(self):
        self.intensity += 5 * self.direction
        if self.intensity >= 255:
            self.intensity = 255
            self.direction = -1
        elif self.intensity <= 0:
            self.intensity = 0
            self.direction = 1

        self.show_image_with_intensity(self.current_image_path, self.intensity)

        self.master.after(100, self.update_image_intensity)

    def show_image_with_intensity(self, path, intensity):
        try:
            # Pobierz wymiary okna i dopasuj obraz
            self.master.update_idletasks()
            w = self.frame.winfo_width()
            h = self.frame.winfo_height() - 100  # odjąć miejsce na przyciski
            img = resize_image(path, w, h)
            img = modify_image_intensity(img, intensity)
            tk_img = ImageTk.PhotoImage(img)
            self.image_label.configure(image=tk_img)
            self.image_label.image = tk_img
        except FileNotFoundError:
            self.stop_test(error=True)

    def on_space_press(self, event):
        reaction_time = time.time() - self.start_time
        current_intensity = self.intensity
        image_name = self.current_image_path.split("/")[-1]

        self.results_manager.add_result(image_name, reaction_time, current_intensity)
        self.load_next_image()

    def stop_test(self, error=False):
        if error:
            messagebox.showerror("Błąd", "Nie można wczytać obrazu.")
        self.end_test()

    def end_test(self):
        if self.timeout_id is not None:
            self.master.after_cancel(self.timeout_id)
        self.master.destroy()
        self.end_callback()


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\logic\exceptions.py
File type: .py
class ImageNotFoundError(Exception):
    pass


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\logic\image_processor.py
File type: .py
from PIL import Image

def resize_image(path, max_width, max_height):
    img = Image.open(path)
    img.thumbnail((max_width, max_height), Image.ANTIALIAS)
    return img

def modify_image_intensity(img: Image, intensity: int) -> Image:
    img = img.convert("RGB")
    pixels = img.load()

    for x in range(img.width):
        for y in range(img.height):
            r, g, b = pixels[x, y]
            r = min(intensity, 255)  # modyfikujemy kanał R
            pixels[x, y] = (r, g, b)

    return img


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\logic\pdf_report.py
File type: .py
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
import os
from datetime import datetime

def generate_pdf_report(pdf_path, images_for_pdf, chart_path_current, chart_path_history):
    c = canvas.Canvas(pdf_path, pagesize=A4)
    width, height = A4

    # Nagłówek
    c.setTitle("Raport z testu percepcji barw")
    c.setFont("Helvetica-Bold", 18)
    c.drawString(50, height - 50, "Wyniki testu")

    y_pos = height - 100
    c.setFont("Helvetica", 12)
    # Lista obrazów z miniaturami
    for item in images_for_pdf:
        dt_str = datetime.fromtimestamp(item['timestamp']).strftime("%Y-%m-%d %H:%M:%S")
        line = f"Obraz: {item['image_name']} | Czas: {item['reaction_time']:.2f}s | Intensywność: {item['intensity']} | {dt_str}"
        print(line)
        c.drawString(50, y_pos, line)
        y_pos -= 20
        # Rysujemy dwa obrazki: oryginał i filtr obok siebie
        if os.path.exists(item['orig_path']):
            c.drawImage(item['orig_path'], 50, y_pos - 100, width=100, height=100, preserveAspectRatio=True)
        if os.path.exists(item['filtered_path']):
            c.drawImage(item['filtered_path'], 200, y_pos - 100, width=100, height=100, preserveAspectRatio=True)
        y_pos -= 120

    # Wstawiamy wykresy
    c.showPage()
    y_pos = height - 100
    c.setFont("Helvetica-Bold", 18)
    c.drawString(50, y_pos, "Wykresy")
    c.setFont("Helvetica", 12)

    # Wstawiamy wykres bieżącego testu (bar plot)
    if os.path.exists(chart_path_current):
        c.drawString(50, y_pos - 50, "Czas reakcji dla obrazow (biezacy test) - wykres slupkowy")
        c.drawImage(chart_path_current, 50, y_pos-250, width=300, height=200, preserveAspectRatio=True)
    y_pos -= 300

    if y_pos < 300:
        c.showPage()
        y_pos = height - 50
    if os.path.exists(chart_path_history):
        c.drawString(50, y_pos, "Czas reakcji w funkcji czasu (wszystkie testy)")
        y_pos -= 50
        c.drawImage(chart_path_history, 50, y_pos - 200, width=400, height=200, preserveAspectRatio=True)
        y_pos -= 250

    c.showPage()
    c.save()

    # Czyszczenie plików tymczasowych
    for file_name in os.listdir(os.path.join("resources", "output")):
        if file_name.startswith("orig_") or file_name.startswith("filtered_"):
            os.remove(os.path.join("resources", "output", file_name))

--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\logic\results_manager.py
File type: .py
# logic/results_manager.py
import csv
import time
import os

class ResultsManager:
    def __init__(self, csv_path="resources/output/results.csv"):
        self.results = []
        self.csv_path = csv_path

    def add_result(self, image_name, reaction_time, intensity):
        # Dodanie timestamp (czas naciśnięcia klawisza)
        current_timestamp = time.time()
        self.results.append({
            "timestamp": current_timestamp,
            "image_name": image_name,
            "reaction_time": reaction_time,
            "intensity": intensity
        })

    def get_results(self):
        return self.results

    def export_csv(self):
        # Append do istniejącego pliku
        fieldnames = ["timestamp", "image_name", "reaction_time", "intensity"]
        file_exists = os.path.exists(self.csv_path)
        with open(self.csv_path, "a", newline="", encoding="utf-8") as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            if not file_exists:
                writer.writeheader()
            for res in self.results:
                writer.writerow(res)


--------------------------------------------------
File End
--------------------------------------------------


C:\Users\arent\AppData\Local\Temp\github_repo_0xc1lb_u\logic\test_controller.py
File type: .py
class TestController:
    def __init__(self):
        self.images = []
        self.current_index = 0
        self.num_iterations = 0

    def setup_test(self, images, num_iterations=10):
        self.images = images
        self.num_iterations = num_iterations
        self.current_index = 0

    def get_next_image(self):
        if self.current_index < self.num_iterations and self.current_index < len(self.images):
            img_path = self.images[self.current_index % len(self.images)]
            self.current_index += 1
            return img_path
        else:
            return None


--------------------------------------------------
File End
--------------------------------------------------
